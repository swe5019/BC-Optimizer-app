# -*- coding: utf-8 -*-
"""BC_Optimizer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Vp9I-qAfJpLN_xH_wLtCONMFMX3Pukbh
"""

from itertools import combinations

# === Step 1: Input Teams ===
team_a = [
    ('Farley', 19), ('Fil', 28.7), ('Sean', 1.4), ('Tom', 14.2),
    ('Alexandra', 9.4), ('Pail', 22.3), ('Greg', 13.7), ('Zimmel', 20.6)
]

team_b = [
    ('Adawg Maize', 12.6), ('Beans Kujava', 16.3), ('Jerry Curl', 13.3),
    ('Pat Swag', 16.9), ('Dmac', 5.7), ('Oobs', 11.9),
    ('Ribs McClure', 17.9), ('Bman', 3.8)
]

used_a = set()
used_b = set()

# === Step 2: Helper Functions ===
def get_available(pool, used):
    return [p for p in pool if p[0] not in used]

def get_pair_by_names(pool, names):
    return [p for p in pool if p[0] in names]

def get_all_valid_pairs(pool, used):
    return [pair for pair in combinations(get_available(pool, used), 2)]

def pairing_score(pair_sent, pair_counter, alpha=1.0, beta=0.5):
    avg_sent = sum(p[1] for p in pair_sent) / 2
    avg_counter = sum(p[1] for p in pair_counter) / 2
    avg_diff = abs(avg_sent - avg_counter)
    balance = abs(pair_counter[0][1] - pair_counter[1][1])
    return alpha * avg_diff - beta * balance

def suggest_best_counter(sent_pair, counter_pool, used_counter):
    best_score = float('inf')
    best_pair = None
    for combo in get_all_valid_pairs(counter_pool, used_counter):
        score = pairing_score(sent_pair, combo)
        if score < best_score:
            best_score = score
            best_pair = combo
    return best_pair, best_score

def suggest_best_pair_to_send(pool, used):
    best_balance = float('-inf')
    best_pair = None
    for pair in get_all_valid_pairs(pool, used):
        spread = abs(pair[0][1] - pair[1][1])
        if spread > best_balance:
            best_balance = spread
            best_pair = pair
    return best_pair, best_balance

# === Step 3: Live Draft ===
print("üìã Welcome to the Final Live Draft Optimizer with Manual Overrides!")

for match_num in range(1, 5):
    print(f"\n=======================")
    print(f"üèåÔ∏è‚Äç‚ôÇÔ∏è Match {match_num}")

    is_atown_turn = (match_num % 2 == 1)
    team_send = 'Atown' if is_atown_turn else 'Pittsburgh'
    team_counter = 'Pittsburgh' if is_atown_turn else 'Atown'
    pool_send = team_a if is_atown_turn else team_b
    pool_counter = team_b if is_atown_turn else team_a
    used_send = used_a if is_atown_turn else used_b
    used_counter = used_b if is_atown_turn else used_a

    # Step 1: Sending Team
    if team_send == 'Pittsburgh':
        suggested_pair, spread = suggest_best_pair_to_send(pool_send, used_send)
        print(f"\nüß† Suggested Pittsburgh Pairing to Send (spread = {spread:.1f}):")
        for p in suggested_pair:
            print(f" - {p[0]} ({p[1]})")
        print("‚úèÔ∏è Enter pairing (comma-separated), or press Enter to accept suggestion:")
        input_pair = input("> ").strip()
        if input_pair == "":
            sent_pair = suggested_pair
        else:
            names = [n.strip() for n in input_pair.split(",")]
            sent_pair = get_pair_by_names(pool_send, names)
    else:
        print(f"\n‚úèÔ∏è {team_send}, enter your pairing (comma-separated):")
        names = [n.strip() for n in input("> ").strip().split(",")]
        sent_pair = get_pair_by_names(pool_send, names)

    if len(sent_pair) != 2:
        print("‚ùå Invalid sending pair. Skipping this match.")
        continue

    used_send.update([p[0] for p in sent_pair])

    # Step 2: Counter Team
    suggested_counter, score = suggest_best_counter(sent_pair, pool_counter, used_counter)
    print(f"\nüß† Suggested {team_counter} Counter Pairing (score = {score:.2f}):")
    for p in suggested_counter:
        print(f" - {p[0]} ({p[1]})")

    print(f"‚úèÔ∏è Enter {team_counter} counter pairing (comma-separated), or press Enter to accept suggestion:")
    input_counter = input("> ").strip()
    if input_counter == "":
        counter_pair = suggested_counter
    else:
        counter_names = [n.strip() for n in input_counter.split(",")]
        counter_pair = get_pair_by_names(pool_counter, counter_names)

    if len(counter_pair) != 2:
        print("‚ùå Invalid counter pair. Skipping this match.")
        continue

    used_counter.update([p[0] for p in counter_pair])

    # Step 3: Print Result
    print("\n‚úÖ Match Locked In:")
    for p in sent_pair:
        print(f" {team_send:<11} ‚Üí {p[0]} ({p[1]})")
    for p in counter_pair:
        print(f" {team_counter:<11} ‚Üí {p[0]} ({p[1]})")
    print("=======================")
